---
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import Author from "../components/Author.astro";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";
import fs from "node:fs";
import path from "node:path";

type Props = CollectionEntry<"posts">["data"];

const {
	title = "",
	titleImage = "",
	description = "",
	author,
	authorSlug,
	publishedDate,
	updatedDate,
	categorySlug,
	category,
} = Astro.props;

// Get the post ID from the URL to construct the image path
const postId = Astro.url.pathname.replace(/\/$/, "").split("/").pop() ?? "";
// For fallback if optimized image loading fails
const fallbackImagePath = titleImage ? `/images/posts/${postId}/${titleImage}` : "";

// Dynamic image import for optimization
let imageModule = null;

if (titleImage) {
	try {
		// Try to load the image dynamically for optimization
		const imgPath = path.join(process.cwd(), "src", "content", "posts", postId, titleImage);
		if (fs.existsSync(imgPath)) {
			// This will be processed by Astro's image optimization
			imageModule = await import(`../content/posts/${postId}/${titleImage}`);
		}
	} catch (error) {
		console.error(`Error loading image for post ${postId}:`, error);
	}
}
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<style>
			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
			}
			.hero-image {
				width: 100%;
				margin-bottom: 2rem; /* Add spacing between image and article content */
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em;
				color: rgb(var(--gray-dark));
			}
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
				color: rgb(var(--black));
			}
			.date {
				margin-bottom: 1em;
				color: rgb(var(--gray));
			}

			/* Dark mode styling for post title and date */
			:global(.dark-mode) .title h1 {
				color: #ffffff;
			}

			:global(.dark-mode) .date {
				color: #b0b6c6;
			}

			/* System preference dark mode */
			@media (prefers-color-scheme: dark) {
				:global(:not(.light-mode):not(.dark-mode)) .title h1 {
					color: #ffffff;
				}

				:global(:not(.light-mode):not(.dark-mode)) .date {
					color: #b0b6c6;
				}
			}

			.author {
				margin-top: 1em;
			}

			.prose p a {
				color: rgb(var(--accent-dark, 0, 50, 150));
				text-decoration: underline;
			}

			/* Dark mode styling for author link */
			:global(.dark-mode) .prose p a {
				color: #b4bbff; /* Lighter blue for better visibility in dark mode */
			}

			/* System preference dark mode */
			@media (prefers-color-scheme: dark) {
				:global(:not(.light-mode):not(.dark-mode)) .prose p a {
					color: #b4bbff; /* Lighter blue for dark mode */
				}
			}

			.category {
				display: inline-block;
				margin-bottom: 1em;
				background-color: rgb(var(--accent-light, 225, 235, 255));
				color: rgb(var(--accent-dark, 0, 50, 150));
				border-radius: 4px;
				padding: 0.3em 0.6em;
				text-decoration: none;
				font-size: 0.9em;
				font-weight: 600;
				transition:
					background-color 0.2s ease,
					color 0.2s ease;
			}
			.category:hover {
				background-color: #00366b; /* Dark blue background */
				color: #ffffff; /* White text */
				text-shadow: none;
			}

			/* Dark mode styles for category button */
			:global(.dark-mode) .category {
				background-color: rgba(109, 123, 255, 0.2); /* Semi-transparent accent color */
				color: #b4bbff; /* Lighter blue text for dark mode */
			}

			:global(.dark-mode) .category:hover {
				background-color: rgba(109, 123, 255, 0.5); /* More opaque on hover */
				color: #ffffff; /* White text on hover */
			}

			/* Auto dark mode based on system preference */
			@media (prefers-color-scheme: dark) {
				:global(:not(.light-mode):not(.dark-mode)) .category {
					background-color: rgba(109, 123, 255, 0.2); /* Semi-transparent accent color */
					color: #b4bbff; /* Lighter blue text for dark mode */
				}

				:global(:not(.light-mode):not(.dark-mode)) .category:hover {
					background-color: rgba(109, 123, 255, 0.5); /* More opaque on hover */
					color: #ffffff; /* White text on hover */
				}
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				<div class="prose">
					<div class="title">
						<h1>{title}</h1>
						{
							categorySlug && (
								<a href={`/section/${categorySlug}/`} class="category">
									{category}
								</a>
							)
						}
						<hr />
					</div>

					<p>by {authorSlug && <a href={`/by/${authorSlug}/`}>{author}</a>}</p>

					{
						titleImage && (
							<div class="hero-image">
								{imageModule ? (
									<Image
										src={imageModule.default}
										alt={title}
										width={720}
										height={420}
										format="webp"
										quality={80}
									/>
								) : (
									<img src={fallbackImagePath} alt={title} />
								)}
							</div>
						)
					}
					<slot />
					<div class="date">
						Published on <FormattedDate date={publishedDate} />
					</div>

					{
						updatedDate && (
							<div class="date">
								Updated on <FormattedDate date={updatedDate} />
							</div>
						)
					}
					<hr />
					<div class="author">
						<Author author={author} authorSlug={authorSlug} />
					</div>
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>
